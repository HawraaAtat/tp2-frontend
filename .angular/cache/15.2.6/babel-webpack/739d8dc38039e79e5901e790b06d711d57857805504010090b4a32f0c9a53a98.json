{"ast":null,"code":"// import {createAction, createReducer, on, props} from '@ngrx/store';\n// import { Country } from '../models/country.model';\n// import {initialState} from \"../reducers/countries.reducer\";\n//\n// export const loadCountries = createAction('[Countries] Load Countries');\n//\n// export const loadCountriesSuccess = createAction(\n//   '[Countries] Load Countries Success',\n//   props<{ countries: Country[] }>()\n// );\n//\n// export const loadCountriesFailure = createAction(\n//   '[Countries] Load Countries Failure',\n//   props<{ error: any }>()\n// );\n//\n// // export const updateRegion = createAction(\n// //   '[Countries] Update Region',\n// //   props<{ country: Country; region: string }>()\n// // );\n//\n// export const updateRegion = createAction(\n//   '[Countries] Update Region',\n//   props<{ country: Country; region: string }>()\n// );\n//\n// export const countriesReducer = createReducer(\n//   initialState,\n//   on(updateRegion, (state, { country, region }) => {\n//     const countries = [...state.countries];\n//     const regions = { ...state.regions };\n//     const index = countries.findIndex((c) => c.id === country.id);\n//     countries[index] = { ...country };\n//     const oldRegion = country.region;\n//     regions[oldRegion] = regions[oldRegion].filter((c) => c.id !== country.id);\n//     regions[region].push({ ...country });\n//     return { ...state, countries, regions };\n//   })\n//\n//\n//\n//\n//\n//\n// );\n//\nimport { createAction, props } from '@ngrx/store';\nexport const highlightRegion = createAction('[Region Highlight] Highlight Region', props());","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,YAAY,EAAEC,KAAK,QAAQ,aAAa;AAEjD,OAAO,MAAMC,eAAe,GAAGF,YAAY,CACzC,qCAAqC,EACrCC,KAAK,EAAsB,CAC5B","names":["createAction","props","highlightRegion"],"sourceRoot":"","sources":["C:\\Users\\PC\\Documents\\GitHub\\tp2-frontend\\src\\app\\actions\\countries.actions.ts"],"sourcesContent":["// import {createAction, createReducer, on, props} from '@ngrx/store';\r\n// import { Country } from '../models/country.model';\r\n// import {initialState} from \"../reducers/countries.reducer\";\r\n//\r\n// export const loadCountries = createAction('[Countries] Load Countries');\r\n//\r\n// export const loadCountriesSuccess = createAction(\r\n//   '[Countries] Load Countries Success',\r\n//   props<{ countries: Country[] }>()\r\n// );\r\n//\r\n// export const loadCountriesFailure = createAction(\r\n//   '[Countries] Load Countries Failure',\r\n//   props<{ error: any }>()\r\n// );\r\n//\r\n// // export const updateRegion = createAction(\r\n// //   '[Countries] Update Region',\r\n// //   props<{ country: Country; region: string }>()\r\n// // );\r\n//\r\n// export const updateRegion = createAction(\r\n//   '[Countries] Update Region',\r\n//   props<{ country: Country; region: string }>()\r\n// );\r\n//\r\n// export const countriesReducer = createReducer(\r\n//   initialState,\r\n//   on(updateRegion, (state, { country, region }) => {\r\n//     const countries = [...state.countries];\r\n//     const regions = { ...state.regions };\r\n//     const index = countries.findIndex((c) => c.id === country.id);\r\n//     countries[index] = { ...country };\r\n//     const oldRegion = country.region;\r\n//     regions[oldRegion] = regions[oldRegion].filter((c) => c.id !== country.id);\r\n//     regions[region].push({ ...country });\r\n//     return { ...state, countries, regions };\r\n//   })\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n// );\r\n//\r\n\r\n\r\nimport { createAction, props } from '@ngrx/store';\r\n\r\nexport const highlightRegion = createAction(\r\n  '[Region Highlight] Highlight Region',\r\n  props<{ region: string }>()\r\n);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}