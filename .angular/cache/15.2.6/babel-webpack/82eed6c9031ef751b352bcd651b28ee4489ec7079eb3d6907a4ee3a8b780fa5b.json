{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CountryMapper } from \"./mappers/country.mapper\";\nlet AppComponent = class AppComponent {\n  constructor(countriesService) {\n    this.countriesService = countriesService;\n    this.title = 'countries-app';\n    this.regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Antarctic'];\n    this.countries = [];\n    this.canEnterPredicate = (drag, drop) => {\n      const dropRegion = drop.id;\n      const dragRegion = drag.data.region;\n      return dropRegion === dragRegion;\n    };\n  }\n  ngOnInit() {\n    const savedCountries = localStorage.getItem('countries');\n    if (savedCountries) {\n      this.countries = JSON.parse(savedCountries);\n    } else {\n      this.countriesService.fetchAllCountries().subscribe(res => {\n        this.countries = CountryMapper.fromCountryDtoToCountry(res);\n      });\n    }\n  }\n  onDrop(event) {\n    console.log('onDrop() called');\n    const droppedCountry = event.item.data;\n    const targetRegion = event.container.data; // use event.container.data directly\n    const currentIndex = this.countries.indexOf(droppedCountry);\n    this.countries.splice(currentIndex, 1);\n    const targetRegionIndex = this.regions.indexOf(targetRegion);\n    const nextCountryIndex = this.getNextCountryIndex(targetRegionIndex, currentIndex);\n    this.countries.splice(nextCountryIndex, 0, droppedCountry);\n    localStorage.setItem('countries', JSON.stringify(this.countries));\n    // Add the following lines to highlight the region that the country belongs to\n    const regionCard = document.getElementById(targetRegion);\n    console.log(targetRegion);\n    if (regionCard) {\n      regionCard.classList.add('highlight');\n    }\n  }\n  getNextCountryIndex(regionIndex, currentIndex) {\n    let nextIndex = this.countries.length;\n    for (let i = currentIndex + 1; i < this.countries.length; i++) {\n      if (this.regions.indexOf(this.countries[i].region) > regionIndex) {\n        nextIndex = i;\n        break;\n      }\n    }\n    return nextIndex;\n  }\n  getRegionCard(country) {\n    const region = country.region;\n    const regionCard = document.getElementById(region);\n    // Set CSS properties for the region card\n    // regionCard.style.backgroundColor = 'yellow';\n    return regionCard;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","CountryMapper","AppComponent","constructor","countriesService","drag","drop","dropRegion","id","dragRegion","data","region","ngOnInit","savedCountries","localStorage","getItem","countries","JSON","parse","fetchAllCountries","subscribe","res","fromCountryDtoToCountry","onDrop","event","console","log","droppedCountry","item","targetRegion","container","currentIndex","indexOf","splice","targetRegionIndex","regions","nextCountryIndex","getNextCountryIndex","setItem","stringify","regionCard","document","getElementById","classList","add","regionIndex","nextIndex","length","i","getRegionCard","country","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\PC\\Documents\\GitHub\\tp2-frontend\\src\\app\\app.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {CountriesService} from \"./services/countries.service\";\r\nimport {CountryMapper} from \"./mappers/country.mapper\";\r\nimport {Country} from \"./models/country.model\";\r\nimport {CdkDrag, CdkDragDrop, CdkDropList} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  title = 'countries-app';\r\n  regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Antarctic'];\r\n\r\n  countries: Array<Country> = [];\r\n\r\n  constructor(private countriesService: CountriesService) { }\r\n\r\n  ngOnInit() {\r\n    const savedCountries= localStorage.getItem('countries');\r\n    if (savedCountries){\r\n      this.countries = JSON.parse(savedCountries);\r\n    }\r\n    else{\r\n      this.countriesService.fetchAllCountries().subscribe(res => {\r\n        this.countries = CountryMapper.fromCountryDtoToCountry(res);\r\n      })\r\n    }\r\n  }\r\n\r\n  onDrop(event: CdkDragDrop<string>) {\r\n    console.log('onDrop() called');\r\n\r\n    const droppedCountry = event.item.data;\r\n    const targetRegion = event.container.data; // use event.container.data directly\r\n    const currentIndex = this.countries.indexOf(droppedCountry);\r\n    this.countries.splice(currentIndex, 1);\r\n    const targetRegionIndex = this.regions.indexOf(targetRegion);\r\n    const nextCountryIndex = this.getNextCountryIndex(targetRegionIndex, currentIndex);\r\n    this.countries.splice(nextCountryIndex, 0, droppedCountry);\r\n\r\n    localStorage.setItem('countries', JSON.stringify(this.countries));\r\n\r\n    // Add the following lines to highlight the region that the country belongs to\r\n    const regionCard = document.getElementById(targetRegion);\r\n    console.log(targetRegion);\r\n    if (regionCard) {\r\n      regionCard.classList.add('highlight');\r\n    }\r\n  }\r\n\r\n  getNextCountryIndex(regionIndex: number, currentIndex: number) {\r\n    let nextIndex = this.countries.length;\r\n    for (let i = currentIndex + 1; i < this.countries.length; i++) {\r\n      if (this.regions.indexOf(this.countries[i].region) > regionIndex) {\r\n        nextIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    return nextIndex;\r\n  }\r\n\r\n   getRegionCard(country: Country): HTMLElement {\r\n    const region = country.region;\r\n    const regionCard = document.getElementById(region) as HTMLElement;\r\n\r\n    // Set CSS properties for the region card\r\n    // regionCard.style.backgroundColor = 'yellow';\r\n\r\n    return regionCard;\r\n  }\r\n\r\n\r\n  canEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\r\n    const dropRegion = drop.id;\r\n    const dragRegion = drag.data.region;\r\n    return dropRegion === dragRegion;\r\n  }\r\n\r\n  //\r\n  // items = ['Item 1', 'Item 2', 'Item 3'];\r\n  // connectedDropLists: string = 'list-1';\r\n  // onDrop(event: CdkDragDrop<string[]>) {\r\n  //   moveItemInArray(this.items, event.previousIndex, event.currentIndex);\r\n  //   console.log('onDrop called');\r\n  // }\r\n  //\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}