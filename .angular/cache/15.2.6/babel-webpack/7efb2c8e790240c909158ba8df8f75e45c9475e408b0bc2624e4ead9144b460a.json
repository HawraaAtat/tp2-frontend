{"ast":null,"code":"import { CountryMapper } from \"./mappers/country.mapper\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/countries.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/cdk/drag-drop\";\nfunction AppComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r3);\n  }\n}\nfunction AppComponent_mat_card_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-card\", 8);\n    i0.ɵɵlistener(\"cdkDropListDropped\", function AppComponent_mat_card_4_Template_mat_card_cdkDropListDropped_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onDrop($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const region_r4 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", region_r4)(\"cdkDropListData\", region_r4)(\"cdkDropListConnectedTo\", ctx_r1.regions);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(region_r4);\n  }\n}\nfunction AppComponent_mat_card_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 10)(1, \"mat-card-content\")(2, \"div\");\n    i0.ɵɵelement(3, \"img\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\")(5, \"h5\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const country_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cdkDragData\", country_r7)(\"cdkDragBoundary\", ctx_r2.getRegionCard(country_r7));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", country_r7.flag, i0.ɵɵsanitizeUrl)(\"alt\", country_r7.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", country_r7.name, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return [a0];\n};\nexport class AppComponent {\n  constructor(countriesService) {\n    this.countriesService = countriesService;\n    this.title = 'countries-app';\n    this.regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Antarctic'];\n    this.countries = [];\n    this.canEnterPredicate = (drag, drop) => {\n      const dropRegion = drop.id;\n      const dragRegion = drag.data.region;\n      return dropRegion === dragRegion;\n    };\n    this.items = ['Item 1', 'Item 2', 'Item 3'];\n    this.connectedDropLists = 'list-1';\n  }\n  ngOnInit() {\n    const savedCountries = localStorage.getItem('countries');\n    if (savedCountries) {\n      this.countries = JSON.parse(savedCountries);\n    } else {\n      this.countriesService.fetchAllCountries().subscribe(res => {\n        this.countries = CountryMapper.fromCountryDtoToCountry(res);\n      });\n    }\n  }\n  onDrop(event) {\n    console.log('onDrop() called');\n    const droppedCountry = event.item.data;\n    const targetRegion = event.container.data; // use event.container.data directly\n    const currentIndex = this.countries.indexOf(droppedCountry);\n    this.countries.splice(currentIndex, 1);\n    const targetRegionIndex = this.regions.indexOf(targetRegion);\n    const nextCountryIndex = this.getNextCountryIndex(targetRegionIndex, currentIndex);\n    this.countries.splice(nextCountryIndex, 0, droppedCountry);\n    localStorage.setItem('countries', JSON.stringify(this.countries));\n    // Add the following lines to highlight the region that the country belongs to\n    const regionCard = document.getElementById(targetRegion);\n    console.log(targetRegion);\n    if (regionCard) {\n      regionCard.classList.add('highlight');\n    }\n  }\n  getNextCountryIndex(regionIndex, currentIndex) {\n    let nextIndex = this.countries.length;\n    for (let i = currentIndex + 1; i < this.countries.length; i++) {\n      if (this.regions.indexOf(this.countries[i].region) > regionIndex) {\n        nextIndex = i;\n        break;\n      }\n    }\n    return nextIndex;\n  }\n  getRegionCard(country) {\n    const region = country.region;\n    const regionCard = document.getElementById(region);\n    // Set CSS properties for the region card\n    // regionCard.style.backgroundColor = 'yellow';\n    return regionCard;\n  }\n  onDrop(event) {\n    moveItemInArray(this.items, event.previousIndex, event.currentIndex);\n    console.log('onDrop called');\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CountriesService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 7,\n  vars: 7,\n  consts: [[1, \"page-layout\"], [\"cdkDropList\", \"\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"cdkDrag\", \"\", 4, \"ngFor\", \"ngForOf\"], [1, \"regions-container\"], [\"class\", \"region-card\", \"cdkDropList\", \"\", 3, \"id\", \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\", 4, \"ngFor\", \"ngForOf\"], [1, \"cards-container\"], [\"id\", \"countries-list\", \"style\", \"width: 150px ; height: 110px; color: white\", \"cdkDrag\", \"\", 3, \"cdkDragData\", \"cdkDragBoundary\", 4, \"ngFor\", \"ngForOf\"], [\"cdkDrag\", \"\"], [\"cdkDropList\", \"\", 1, \"region-card\", 3, \"id\", \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [1, \"region-title\"], [\"id\", \"countries-list\", \"cdkDrag\", \"\", 2, \"width\", \"150px\", \"height\", \"110px\", \"color\", \"white\", 3, \"cdkDragData\", \"cdkDragBoundary\"], [2, \"width\", \"50px\", 3, \"src\", \"alt\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵlistener(\"cdkDropListDropped\", function AppComponent_Template_div_cdkDropListDropped_1_listener($event) {\n        return ctx.onDrop($event);\n      });\n      i0.ɵɵtemplate(2, AppComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtemplate(4, AppComponent_mat_card_4_Template, 3, 4, \"mat-card\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 5);\n      i0.ɵɵtemplate(6, AppComponent_mat_card_6_Template, 7, 5, \"mat-card\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"cdkDropListData\", ctx.items)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction1(5, _c0, ctx.connectedDropLists));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.regions);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.countries);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.MatCard, i3.MatCardContent, i4.CdkDropList, i4.CdkDrag],\n  styles: [\".page-layout[_ngcontent-%COMP%] {\\n  background-color: #fff;\\n  padding: 25px;\\n  display: flex;\\n  flex-direction: column;\\n  height: 100vh;\\n  row-gap: 25px;\\n}\\n\\n.cards-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  column-gap: 5px;\\n  row-gap: 5px;\\n  flex: auto;\\n}\\n\\n.cards-container[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex: auto;\\n  background-color: #fff;\\n  color: #000;\\n}\\n\\n.cards-container[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%]   .mat-card-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  column-gap: 10px;\\n  align-items: center;\\n}\\n\\n.cards-container[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%]   .mat-card-content[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  height: 25px;\\n}\\n\\n.regions-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  column-gap: 20px;\\n}\\n\\n.regions-container[_ngcontent-%COMP%]   .region-card[_ngcontent-%COMP%] {\\n  height: 300px;\\n  flex: auto;\\n  background-color: #fff;\\n}\\n\\n.regions-container[_ngcontent-%COMP%]   .region-card[_ngcontent-%COMP%]   .region-title[_ngcontent-%COMP%] {\\n  color: #000;\\n  text-align: center;\\n  font-size: 20px;\\n}\\n\\n.highlight[_ngcontent-%COMP%] {\\n  border: 3px solid yellow;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usc0JBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsYUFBQTtFQUNBLGFBQUE7QUFDRjs7QUFDQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLFVBQUE7QUFFRjs7QUFBQTtFQUNFLGFBQUE7RUFDQSxVQUFBO0VBQ0Esc0JBQUE7RUFDQSxXQUFBO0FBR0Y7O0FBREE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0FBSUY7O0FBRkE7RUFDRSxZQUFBO0FBS0Y7O0FBSEE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQU1GOztBQUpBO0VBQ0UsYUFBQTtFQUNBLFVBQUE7RUFDQSxzQkFBQTtBQU9GOztBQUxBO0VBQ0UsV0FBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtBQVFGOztBQUNBO0VBQ0Usd0JBQUE7QUFFRiIsInNvdXJjZXNDb250ZW50IjpbIi5wYWdlLWxheW91dCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBwYWRkaW5nOiAyNXB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIHJvdy1nYXA6IDI1cHg7XHJcbn1cclxuLmNhcmRzLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gIGZsZXgtd3JhcDogd3JhcDtcclxuICBjb2x1bW4tZ2FwOiA1cHg7XHJcbiAgcm93LWdhcDogNXB4O1xyXG4gIGZsZXg6IGF1dG87XHJcbn1cclxuLmNhcmRzLWNvbnRhaW5lciAubWF0LWNhcmQge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleDogYXV0bztcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gIGNvbG9yOiAjMDAwO1xyXG59XHJcbi5jYXJkcy1jb250YWluZXIgLm1hdC1jYXJkIC5tYXQtY2FyZC1jb250ZW50IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgY29sdW1uLWdhcDogMTBweDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcbi5jYXJkcy1jb250YWluZXIgLm1hdC1jYXJkIC5tYXQtY2FyZC1jb250ZW50IGltZyB7XHJcbiAgaGVpZ2h0OiAyNXB4O1xyXG59XHJcbi5yZWdpb25zLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gIGNvbHVtbi1nYXA6IDIwcHg7XHJcbn1cclxuLnJlZ2lvbnMtY29udGFpbmVyIC5yZWdpb24tY2FyZCB7XHJcbiAgaGVpZ2h0OiAzMDBweDtcclxuICBmbGV4OiBhdXRvO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbn1cclxuLnJlZ2lvbnMtY29udGFpbmVyIC5yZWdpb24tY2FyZCAucmVnaW9uLXRpdGxlIHtcclxuICBjb2xvcjogIzAwMDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG59XHJcblxyXG4vLy5oaWdobGlnaHQge1xyXG4vLyAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xyXG4vL31cclxuLy8ucmVnaW9uLWNhcmQuaGlnaGxpZ2h0IHtcclxuLy8gIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcclxuLy99XHJcbi5oaWdobGlnaHQge1xyXG4gIGJvcmRlcjogM3B4IHNvbGlkIHllbGxvdztcclxufVxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["CountryMapper","i0","AppComponent","constructor","countriesService","drag","drop","dropRegion","id","dragRegion","data","region","ngOnInit","savedCountries","localStorage","getItem","countries","JSON","parse","fetchAllCountries","subscribe","res","fromCountryDtoToCountry","onDrop","event","console","log","droppedCountry","item","targetRegion","container","currentIndex","indexOf","splice","targetRegionIndex","regions","nextCountryIndex","getNextCountryIndex","setItem","stringify","regionCard","document","getElementById","classList","add","regionIndex","nextIndex","length","i","getRegionCard","country","moveItemInArray","items","previousIndex","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\PC\\Documents\\GitHub\\tp2-frontend\\src\\app\\app.component.ts","C:\\Users\\PC\\Documents\\GitHub\\tp2-frontend\\src\\app\\app.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {CountriesService} from \"./services/countries.service\";\r\nimport {CountryMapper} from \"./mappers/country.mapper\";\r\nimport {Country} from \"./models/country.model\";\r\nimport {CdkDrag, CdkDragDrop, CdkDropList} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  title = 'countries-app';\r\n  regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Antarctic'];\r\n\r\n  countries: Array<Country> = [];\r\n\r\n  constructor(private countriesService: CountriesService) { }\r\n\r\n  ngOnInit() {\r\n    const savedCountries= localStorage.getItem('countries');\r\n    if (savedCountries){\r\n      this.countries = JSON.parse(savedCountries);\r\n    }\r\n    else{\r\n      this.countriesService.fetchAllCountries().subscribe(res => {\r\n        this.countries = CountryMapper.fromCountryDtoToCountry(res);\r\n      })\r\n    }\r\n  }\r\n\r\n  onDrop(event: CdkDragDrop<string>) {\r\n    console.log('onDrop() called');\r\n\r\n    const droppedCountry = event.item.data;\r\n    const targetRegion = event.container.data; // use event.container.data directly\r\n    const currentIndex = this.countries.indexOf(droppedCountry);\r\n    this.countries.splice(currentIndex, 1);\r\n    const targetRegionIndex = this.regions.indexOf(targetRegion);\r\n    const nextCountryIndex = this.getNextCountryIndex(targetRegionIndex, currentIndex);\r\n    this.countries.splice(nextCountryIndex, 0, droppedCountry);\r\n\r\n    localStorage.setItem('countries', JSON.stringify(this.countries));\r\n\r\n    // Add the following lines to highlight the region that the country belongs to\r\n    const regionCard = document.getElementById(targetRegion);\r\n    console.log(targetRegion);\r\n    if (regionCard) {\r\n      regionCard.classList.add('highlight');\r\n    }\r\n  }\r\n\r\n  getNextCountryIndex(regionIndex: number, currentIndex: number) {\r\n    let nextIndex = this.countries.length;\r\n    for (let i = currentIndex + 1; i < this.countries.length; i++) {\r\n      if (this.regions.indexOf(this.countries[i].region) > regionIndex) {\r\n        nextIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    return nextIndex;\r\n  }\r\n\r\n   getRegionCard(country: Country): HTMLElement {\r\n    const region = country.region;\r\n    const regionCard = document.getElementById(region) as HTMLElement;\r\n\r\n    // Set CSS properties for the region card\r\n    // regionCard.style.backgroundColor = 'yellow';\r\n\r\n    return regionCard;\r\n  }\r\n\r\n\r\n  canEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\r\n    const dropRegion = drop.id;\r\n    const dragRegion = drag.data.region;\r\n    return dropRegion === dragRegion;\r\n  }\r\n\r\n\r\n  items = ['Item 1', 'Item 2', 'Item 3'];\r\n  connectedDropLists: string = 'list-1';\r\n  onDrop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.items, event.previousIndex, event.currentIndex);\r\n    console.log('onDrop called');\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"page-layout\">\r\n\r\n    <div cdkDropList\r\n         [cdkDropListData]=\"items\"\r\n         [cdkDropListConnectedTo]=\"[connectedDropLists]\"\r\n         (cdkDropListDropped)=\"onDrop($event)\">\r\n      <div *ngFor=\"let item of items\" cdkDrag>{{ item }}</div>\r\n    </div>\r\n\r\n  <div class=\"regions-container\">\r\n    <mat-card class=\"region-card\"\r\n              *ngFor=\"let region of regions\" [id]=\"region\"\r\n              cdkDropList\r\n              [cdkDropListData]=\"region\"\r\n              [cdkDropListConnectedTo]=\"regions\"\r\n              (cdkDropListDropped)=\"onDrop($event)\">\r\n      <div class=\"region-title\">{{region}}</div>\r\n    </mat-card>\r\n  </div>\r\n  <div class=\"cards-container\">\r\n    <mat-card id=\"countries-list\" style=\"width: 150px ; height: 110px; color: white\"\r\n              *ngFor=\"let country of countries\"\r\n              cdkDrag\r\n              [cdkDragData]=\"country\"\r\n              [cdkDragBoundary]=\"getRegionCard(country)\">\r\n      <mat-card-content>\r\n        <div>\r\n          <img style=\"width: 50px\" [src]=\"country.flag\" [alt]=\"country.name\">\r\n        </div>\r\n        <div>\r\n          <h5>\r\n          {{country.name}}\r\n          </h5>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}