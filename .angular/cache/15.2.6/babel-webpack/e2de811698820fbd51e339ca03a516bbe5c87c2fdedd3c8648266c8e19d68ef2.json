{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as CountriesActions from '../actions/countries.actions';\nexport const initialState = {\n  countries: [],\n  regions: {\n    Europe: [],\n    Asia: []\n  }\n};\nexport const countriesReducer = createReducer(initialState, on(CountriesActions.loadCountriesSuccess, (state, {\n  countries\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    countries\n  });\n}), on(CountriesActions.updateRegion, (state, {\n  country,\n  region\n}) => {\n  const regions = Object.assign({}, state.regions);\n  const countryToUpdate = state.countries.find(c => c.id === country.id);\n  const oldRegion = countryToUpdate ? countryToUpdate.region : '';\n  const countryIndex = regions[oldRegion].indexOf(country);\n  regions[oldRegion].splice(countryIndex, 1);\n  regions[region].push(country);\n  return Object.assign(Object.assign({}, state), {\n    regions\n  });\n}));","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,OAAO,KAAKC,gBAAgB,MAAM,8BAA8B;AAEhE,OAAO,MAAMC,YAAY,GAAa;EACpCC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE;IACPC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;;CAET;AAED,OAAO,MAAMC,gBAAgB,GAAGR,aAAa,CAC3CG,YAAY,EACZF,EAAE,CAACC,gBAAgB,CAACO,oBAAoB,EAAE,CAACC,KAAK,EAAE;EAAEN;AAAS,CAAE,KAAI;EACjE,uCAAYM,KAAK;IAAEN;EAAS;AAC9B,CAAC,CAAC,EACFH,EAAE,CAACC,gBAAgB,CAACS,YAAY,EAAE,CAACD,KAAK,EAAE;EAAEE,OAAO;EAAEC;AAAM,CAAE,KAAI;EAC/D,MAAMR,OAAO,qBAAQK,KAAK,CAACL,OAAO,CAAE;EACpC,MAAMS,eAAe,GAAGJ,KAAK,CAACN,SAAS,CAACW,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;EACxE,MAAMC,SAAS,GAAGJ,eAAe,GAAGA,eAAe,CAACD,MAAM,GAAG,EAAE;EAC/D,MAAMM,YAAY,GAAGd,OAAO,CAACa,SAAS,CAAC,CAACE,OAAO,CAACR,OAAO,CAAC;EACxDP,OAAO,CAACa,SAAS,CAAC,CAACG,MAAM,CAACF,YAAY,EAAE,CAAC,CAAC;EAC1Cd,OAAO,CAACQ,MAAM,CAAC,CAACS,IAAI,CAACV,OAAO,CAAC;EAC7B,uCAAYF,KAAK;IAAEL;EAAO;AAC5B,CAAC,CAAC,CACH","names":["createReducer","on","CountriesActions","initialState","countries","regions","Europe","Asia","countriesReducer","loadCountriesSuccess","state","updateRegion","country","region","countryToUpdate","find","c","id","oldRegion","countryIndex","indexOf","splice","push"],"sourceRoot":"","sources":["C:\\Users\\PC\\Documents\\GitHub\\tp2-frontend\\src\\app\\reducers\\countries.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\r\nimport { AppState } from '../state/app.state';\r\nimport * as CountriesActions from '../actions/countries.actions';\r\n\r\nexport const initialState: AppState = {\r\n  countries: [],\r\n  regions: {\r\n    Europe: [],\r\n    Asia: []\r\n  }\r\n};\r\n\r\nexport const countriesReducer = createReducer(\r\n  initialState,\r\n  on(CountriesActions.loadCountriesSuccess, (state, { countries }) => {\r\n    return { ...state, countries };\r\n  }),\r\n  on(CountriesActions.updateRegion, (state, { country, region }) => {\r\n    const regions = { ...state.regions };\r\n    const countryToUpdate = state.countries.find((c) => c.id === country.id);\r\n    const oldRegion = countryToUpdate ? countryToUpdate.region : '';\r\n    const countryIndex = regions[oldRegion].indexOf(country);\r\n    regions[oldRegion].splice(countryIndex, 1);\r\n    regions[region].push(country);\r\n    return { ...state, regions };\r\n  })\r\n);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}