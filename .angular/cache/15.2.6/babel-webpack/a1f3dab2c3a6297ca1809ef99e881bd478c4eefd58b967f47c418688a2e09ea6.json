{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { highlightRegion } from \"./actions/countries.actions\";\nlet AppComponent = class AppComponent {\n  constructor(countriesService, store) {\n    this.countriesService = countriesService;\n    this.store = store;\n    this.title = 'countries-app';\n    this.regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Antarctic'];\n    this.countries = [];\n  }\n  ngOnInit() {\n    const savedCountries = localStorage.getItem('countries');\n    if (savedCountries) {\n      this.countries = JSON.parse(savedCountries);\n    } else {\n      this.countriesService.fetchAllCountries().subscribe(res => {\n        this.countries = res;\n        localStorage.setItem('countries', JSON.stringify(res));\n      });\n    }\n    this.highlightedRegion$ = this.store.select('highlightedRegion');\n  }\n  onCountryHover(region) {\n    this.store.dispatch(highlightRegion({\n      region\n    }));\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAM/C,SAAQC,eAAe,QAAO,6BAA6B;AASpD,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAOvBC,YACUC,gBAAkC,EAClCC,KAA2C;IAD3C,qBAAgB,GAAhBD,gBAAgB;IAChB,UAAK,GAALC,KAAK;IARf,UAAK,GAAG,eAAe;IACvB,YAAO,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC;IAG1E,cAAS,GAAsB,EAAE;EAK9B;EAEHC,QAAQ;IACN,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,IAAIF,cAAc,EAAE;MAClB,IAAI,CAACG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC;KAC5C,MAAM;MACL,IAAI,CAACH,gBAAgB,CAACS,iBAAiB,EAAE,CAACC,SAAS,CAAEC,GAAG,IAAI;QAC1D,IAAI,CAACL,SAAS,GAAGK,GAAG;QACpBP,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,SAAS,CAACF,GAAG,CAAC,CAAC;MACxD,CAAC,CAAC;;IAGJ,IAAI,CAACG,kBAAkB,GAAG,IAAI,CAACb,KAAK,CAACc,MAAM,CAAC,mBAAmB,CAAC;EAClE;EAEAC,cAAc,CAACC,MAAc;IAC3B,IAAI,CAAChB,KAAK,CAACiB,QAAQ,CAACrB,eAAe,CAAC;MAAEoB;IAAM,CAAE,CAAC,CAAC;EAClD;CA8DD;AA1FYnB,YAAY,eALxBF,SAAS,CAAC;EACTuB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWvB,YAAY,CA0FxB;SA1FYA,YAAY","names":["Component","highlightRegion","AppComponent","constructor","countriesService","store","ngOnInit","savedCountries","localStorage","getItem","countries","JSON","parse","fetchAllCountries","subscribe","res","setItem","stringify","highlightedRegion$","select","onCountryHover","region","dispatch","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\PC\\Documents\\GitHub\\tp2-frontend\\src\\app\\app.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\r\nimport {CountriesService} from \"./services/countries.service\";\r\nimport {CountryMapper} from \"./mappers/country.mapper\";\r\nimport {Country} from \"./models/country.model\";\r\nimport {CdkDrag, CdkDragDrop, CdkDropList} from '@angular/cdk/drag-drop';\r\nimport {Store} from \"@ngrx/store\";\r\nimport {highlightRegion} from \"./actions/countries.actions\";\r\nimport {Observable} from \"rxjs\";\r\nimport {CountryDto} from \"./models/countryDto.model\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  title = 'countries-app';\r\n  regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Antarctic'];\r\n  highlightedRegion$!: Observable<string>;\r\n\r\n  countries: Array<CountryDto> = [];\r\n\r\n  constructor(\r\n    private countriesService: CountriesService,\r\n    private store: Store<{ highlightedRegion: string }>\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const savedCountries = localStorage.getItem('countries');\r\n    if (savedCountries) {\r\n      this.countries = JSON.parse(savedCountries);\r\n    } else {\r\n      this.countriesService.fetchAllCountries().subscribe((res) => {\r\n        this.countries = res;\r\n        localStorage.setItem('countries', JSON.stringify(res));\r\n      });\r\n    }\r\n\r\n    this.highlightedRegion$ = this.store.select('highlightedRegion');\r\n  }\r\n\r\n  onCountryHover(region: string) {\r\n    this.store.dispatch(highlightRegion({ region }));\r\n  }\r\n\r\n\r\n\r\n  // onDrop(event: CdkDragDrop<string>) {\r\n  //   console.log('onDrop() called');\r\n  //\r\n  //   const droppedCountry = event.item.data;\r\n  //   const targetRegion = event.container.data; // use event.container.data directly\r\n  //   const currentIndex = this.countries.indexOf(droppedCountry);\r\n  //   this.countries.splice(currentIndex, 1);\r\n  //   const targetRegionIndex = this.regions.indexOf(targetRegion);\r\n  //   const nextCountryIndex = this.getNextCountryIndex(targetRegionIndex, currentIndex);\r\n  //   this.countries.splice(nextCountryIndex, 0, droppedCountry);\r\n  //\r\n  //   localStorage.setItem('countries', JSON.stringify(this.countries));\r\n  //\r\n  //   // Add the following lines to highlight the region that the country belongs to\r\n  //   const regionCard = document.getElementById(targetRegion);\r\n  //   console.log(targetRegion);\r\n  //   if (regionCard) {\r\n  //     regionCard.classList.add('highlight');\r\n  //   }\r\n  // }\r\n  //\r\n  // getNextCountryIndex(regionIndex: number, currentIndex: number) {\r\n  //   let nextIndex = this.countries.length;\r\n  //   for (let i = currentIndex + 1; i < this.countries.length; i++) {\r\n  //     if (this.regions.indexOf(this.countries[i].region) > regionIndex) {\r\n  //       nextIndex = i;\r\n  //       break;\r\n  //     }\r\n  //   }\r\n  //   return nextIndex;\r\n  // }\r\n  //\r\n  //  getRegionCard(country: Country): HTMLElement {\r\n  //   const region = country.region;\r\n  //   const regionCard = document.getElementById(region) as HTMLElement;\r\n  //\r\n  //   // Set CSS properties for the region card\r\n  //   // regionCard.style.backgroundColor = 'yellow';\r\n  //\r\n  //   return regionCard;\r\n  // }\r\n  //\r\n  //\r\n  // canEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\r\n  //   const dropRegion = drop.id;\r\n  //   const dragRegion = drag.data.region;\r\n  //   return dropRegion === dragRegion;\r\n  // }\r\n  //\r\n  // //\r\n  // // items = ['Item 1', 'Item 2', 'Item 3'];\r\n  // // connectedDropLists: string = 'list-1';\r\n  // // onDrop(event: CdkDragDrop<string[]>) {\r\n  // //   moveItemInArray(this.items, event.previousIndex, event.currentIndex);\r\n  // //   console.log('onDrop called');\r\n  // // }\r\n  // //\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}